generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  String           @id @default(cuid())
  username            String           @unique
  img_url             String?
  receivedFriendships Friendship[]     @relation("received")
  sentFriendships     Friendship[]     @relation("sent")
  session             Session[]
  sessionComments     SessionComment[]
  userBacking         UserBacking[]

  @@index([username])
}

model Friendship {
  id         Int      @id @default(autoincrement())
  user_id    String
  friend_id  String
  status     Boolean  @default(false)
  created_at DateTime @default(now())
  friend     User     @relation("received", fields: [friend_id], references: [id], onDelete: Cascade)
  user       User     @relation("sent", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, friend_id])
  @@index([user_id])
  @@index([friend_id])
}

model Backing {
  id         Int           @id @default(autoincrement())
  name       String
  owner      String
  float      Int
  created_at DateTime      @default(now())
  chops      Chop[]
  session    Session[]
  topUps     TopUp[]
  access     UserBacking[]

  @@unique([name, owner])
  @@index([owner])
}

model UserBacking {
  id         Int     @id @default(autoincrement())
  user_id    String
  backing_id Int
  type       String
  percent    Float   @default(0)
  backing    Backing @relation(fields: [backing_id], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, backing_id])
  @@index([backing_id])
  @@index([user_id])
}

model Session {
  id         Int              @id @default(autoincrement())
  user_id    String           @default("N/A")
  backing_id Int
  amount     Int
  created_at DateTime         @default(now())
  length     Int?
  game_type  String           @default("cash_game")
  location   String?
  backing    Backing          @relation(fields: [backing_id], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments   SessionComment[]

  @@index([backing_id])
  @@index([user_id])
}

model Chop {
  id         String   @id @default(cuid())
  user_id    String
  backing_id Int
  amount     Int
  created_at DateTime @default(now())
  chop_split String
  note       String?
  Backing    Backing  @relation(fields: [backing_id], references: [id], onDelete: Cascade)
}

model TopUp {
  id         String   @id @default(cuid())
  user_id    String
  backing_id Int
  amount     Int
  created_at DateTime @default(now())
  note       String?
  Backing    Backing  @relation(fields: [backing_id], references: [id], onDelete: Cascade)
}

model SessionComment {
  id         Int      @id @default(autoincrement())
  user_id    String
  session_id Int
  body       String
  likes      Int      @default(0)
  created_at DateTime @default(now())
  session    Session  @relation(fields: [session_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([session_id])
}
